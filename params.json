{"name":"Teach Programming","tagline":"Some reflections on teaching programming.  I hope these may be helpful to some others.","body":"Teaching Programming\r\n================\r\nUsing Javascript as an Example\r\n\r\n**This is not for students to work with directly, but for those interested in instruction.**\r\n\r\n# Introduction\r\n\r\nLearning to code is hard and it shouldn’t be.  *I agree with Bret Victor that this is in great part due to programming languages being poorly designed.  Ease of learning should be a core design consideration in creation of programming languages, and programmer should stop finding it acceptable for things to be otherwise. (Read more about this here: [http://worrydream.com/LearnableProgramming/](http://worrydream.com/LearnableProgramming/) )*\r\n\r\nUnfortunately, I can’t develop a new programming language, but I do have an interest immediately in helping those who are interested in programming learn.  \r\n\r\nI belive in a direct person-to-person involvement in education; I don’t think we should be indifferent to people’s failures in learning, since a failure in these matters often makes it harder to make another attempt.  We should not leave those who want to learn stranded.\r\n\r\nThe following stages are intended to be repeated multiple times, and require the guidance of someone who is already familiar with the technology you are trying to learn.  Therefore, this document is for those who want to teach as much (if not more) than those who want to learn.  Both teacher and student should be familiar with this document so that all parties understand the process involved.\r\n\r\n# Environment Setup\r\n\r\nThis sucks.  Fortunately it isn’t so hard with Javascript, since you already have a browser.\r\n\r\n# Analysis of Technology\r\n\r\nThis will require some homework for the teacher.  The idea is to evaluate the technologies you will be teaching so you can fit the different components to the following sections.  \r\n\r\nI'm going to talk about this more in depth in the section titles Programming Ontology\r\n\r\n\r\n# Analysis of the Student\r\n\r\nDiscover how much the student already know?\r\n\r\n# Vocabulary Study\r\n\r\nSuggest that the student learning vocabulary involved in the technologies they want to learn.  Reading articles, watching tutorials and looking at questions/answers (on stackoverflow), even with little comprehension can help provide a realistic view of ignorance on a subject, and help with encountering new terms.\r\n\r\n*Programming Terminology Resources:*\r\n\r\n* [http://www.codecademy.com/glossary/javascript](http://www.codecademy.com/glossary/javascript)\r\n\r\n* [https://developer.mozilla.org/en-US/docs/Glossary](https://developer.mozilla.org/en-US/docs/Glossary)\r\n\r\n# Iterate Over These Following Steps:\r\n\r\n* Try emphasizing a type on each iteration. \r\n\r\n    * In early iterations start with simple types\r\n\r\n        * text, number, truth values\r\n\r\n        * It’s ok to do all three of these at once, but emphaze only one at a time\r\n\r\n    * After simple types work with aggreate types\r\n\r\n        * lists, generic\r\n\r\n    * After aggregate types work with program blocks\r\n\r\n        * functions\r\n\r\n    * After all of these, try going through using combinations of these\r\n\r\n    * After this, start adding more application layers, but one at a time.\r\n\r\n        * For each application layer you add, the entire process may have to be repeated, starting with basics of that layer.\r\n\r\n* Practice putting/getting values with that particular type.\r\n\r\n* Practice manipulations on that type\r\n\r\n* Practice control flow with that type\r\n\r\n    * Understand truth values of a type\r\n\r\n* Go Over some Common tasks With a type\r\n\r\n* If you have covered basic types (text, number, truth value)\r\n\r\n    * Work with built in features\r\n\r\n## Types (Conceptually)\r\n\r\nText (String, char)\r\n\r\nNumber (int, float, double)\r\n\r\nTruth Value (Boolean)\r\n\r\nAlgorithm (Function)\r\n\r\nLists (Array)\r\n\r\nGeneric (Object)\r\n\r\n## Putting and Getting Values\r\n\r\nA level/layer/part of a software system is defined by a programming interface for putting and getting values.  \r\n\r\nHere are some different levels of a system programmers might interact with\r\n\r\n* Memory: data we put in local variable are manipulating direcly in our program.  This is the most essential layer for programming.\r\n\r\n    * ```var x = 2; x = x * 2; console.log(x);```\r\n\r\n* Network (we can put and get values from the network)\r\n\r\n    * HTTP request (‘web’ request)\r\n\r\n    * TCP/UDP\r\n\r\n* File System\r\n\r\n* Other programs (via an api used in our program or through the network)\r\n\r\n    * Database (on current machine or through network)\r\n\r\n    * Browser (*e.g.*, Document Object Model, or DOM)\r\n\r\n    * Service on network (Facebook)\r\n\r\n* User (we can prompt user for input)\r\n\r\n*e.g.*:\r\n```javascript\r\nvar x = 12;\r\n\r\nconsole.log(x);\r\n\r\n(function(x) {\r\n\r\n\tconsole.log(x);\r\n\r\n})(12);\r\n\r\nvar x = [1,2,3];\r\n\r\nconsole.log(x[0]);\r\n```\r\n\r\n## Simple Data Manipulation\r\n\r\n+, -, /, *, %  \r\n\r\n()\r\n\r\n||, && \r\n\r\n++x, x++, +=\r\n\r\n## Control of Program Flow\r\n\r\nif\r\n\r\nelse \r\n\r\nfor\r\n\r\ncan probably avoid:\r\n\r\nwhile\r\n\r\ndo...while\r\n\r\nswitch\r\n\r\n## Common Tasks\r\n\r\n* Find text in a string\r\n\r\n* Evaluate a mathematical expression\r\n\r\n* Traverse an array (in order to find something)\r\n\r\n## Extra: Built In Features For Types / API Features\r\n\r\n*e.g.*, array.prototype functions\r\n\r\n## Extra Extra: Patterns for Common Tasks\r\n\r\n*e.g.*, Closure, module pattern\r\n\r\n# Advanced\r\n\r\nThese topics don’t need to be covered until the student has relative autonomy.\r\n\r\n## Software Design Principles\r\n\r\nSOLID\r\n\r\n<table>\r\n  <tr>\r\n    <td>Initial</td>\r\n    <td>Stands for\r\n(acronym)</td>\r\n    <td>Concept</td>\r\n  </tr>\r\n  <tr>\r\n    <td>S</td>\r\n    <td>SRP [4]</td>\r\n    <td>Single responsibility principle\r\na class should have only a single responsibility (i.e. only one potential change in the software's specification should be able to affect the specification of the class)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>O</td>\r\n    <td>OCP [5]</td>\r\n    <td>Open/closed principle\r\n\"software entities … should be open for extension, but closed for modification.\"</td>\r\n  </tr>\r\n  <tr>\r\n    <td>L</td>\r\n    <td>LSP [6]</td>\r\n    <td>Liskov substitution principle\r\n“objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.” See also design by contract.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>I</td>\r\n    <td>ISP [7]</td>\r\n    <td>Interface segregation principle\r\n“many client-specific interfaces are better than one general-purpose interface.”[8]</td>\r\n  </tr>\r\n  <tr>\r\n    <td>D</td>\r\n    <td>DIP [9]</td>\r\n    <td>Dependency inversion principle\r\none should “Depend upon Abstractions. Do not depend upon concretions.”[8]\r\nDependency injection is one method of following this principle.</td>\r\n  </tr>\r\n</table>\r\n\r\n\r\nDRY (Don’t Repeat Yourself)\r\n\r\nIf you do something more than once, consider writing a function.\r\n\r\n#Programming Ontology\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}